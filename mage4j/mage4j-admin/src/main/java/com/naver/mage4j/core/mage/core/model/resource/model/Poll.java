package com.naver.mage4j.core.mage.core.model.resource.model;

// Generated 2014. 7. 17 ���� 12:15:45 by Hibernate Tools 4.0.0

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;

import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import com.naver.mage4j.core.mage.core.model.resource.store.Store;

/**
 * Poll generated by hbm2java
 */
@Entity
@Table(name = "poll"
	, catalog = "magento")
public class Poll implements java.io.Serializable {

	private Integer pollId;
	private Store coreStore;
	private String pollTitle;
	private int votesCount;
	private Date datePosted;
	private Date dateClosed;
	private short active;
	private short closed;
	private Short answersDisplay;
	private Set<PollAnswer> pollAnswers = new HashSet<PollAnswer>(0);
	private Set<Store> coreStores = new HashSet<Store>(0);

	public Poll() {
	}

	public Poll(Store coreStore, int votesCount, Date datePosted, short active, short closed) {
		this.coreStore = coreStore;
		this.votesCount = votesCount;
		this.datePosted = datePosted;
		this.active = active;
		this.closed = closed;
	}

	public Poll(Store coreStore, String pollTitle, int votesCount, Date datePosted, Date dateClosed, short active, short closed, Short answersDisplay, Set<PollAnswer> pollAnswers, Set<Store> coreStores) {
		this.coreStore = coreStore;
		this.pollTitle = pollTitle;
		this.votesCount = votesCount;
		this.datePosted = datePosted;
		this.dateClosed = dateClosed;
		this.active = active;
		this.closed = closed;
		this.answersDisplay = answersDisplay;
		this.pollAnswers = pollAnswers;
		this.coreStores = coreStores;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "poll_id", unique = true, nullable = false)
	public Integer getPollId() {
		return this.pollId;
	}

	public void setPollId(Integer pollId) {
		this.pollId = pollId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "store_id", nullable = false)
	public Store getCoreStore() {
		return this.coreStore;
	}

	public void setCoreStore(Store coreStore) {
		this.coreStore = coreStore;
	}

	@Column(name = "poll_title")
	public String getPollTitle() {
		return this.pollTitle;
	}

	public void setPollTitle(String pollTitle) {
		this.pollTitle = pollTitle;
	}

	@Column(name = "votes_count", nullable = false)
	public int getVotesCount() {
		return this.votesCount;
	}

	public void setVotesCount(int votesCount) {
		this.votesCount = votesCount;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "date_posted", nullable = false, length = 19)
	public Date getDatePosted() {
		return this.datePosted;
	}

	public void setDatePosted(Date datePosted) {
		this.datePosted = datePosted;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "date_closed", length = 19)
	public Date getDateClosed() {
		return this.dateClosed;
	}

	public void setDateClosed(Date dateClosed) {
		this.dateClosed = dateClosed;
	}

	@Column(name = "active", nullable = false)
	public short getActive() {
		return this.active;
	}

	public void setActive(short active) {
		this.active = active;
	}

	@Column(name = "closed", nullable = false)
	public short getClosed() {
		return this.closed;
	}

	public void setClosed(short closed) {
		this.closed = closed;
	}

	@Column(name = "answers_display")
	public Short getAnswersDisplay() {
		return this.answersDisplay;
	}

	public void setAnswersDisplay(Short answersDisplay) {
		this.answersDisplay = answersDisplay;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "poll")
	public Set<PollAnswer> getPollAnswers() {
		return this.pollAnswers;
	}

	public void setPollAnswers(Set<PollAnswer> pollAnswers) {
		this.pollAnswers = pollAnswers;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "poll_store", catalog = "magento", joinColumns = {
		@JoinColumn(name = "poll_id", nullable = false, updatable = false)}, inverseJoinColumns = {
		@JoinColumn(name = "store_id", nullable = false, updatable = false)})
	public Set<Store> getCoreStores() {
		return this.coreStores;
	}

	public void setCoreStores(Set<Store> coreStores) {
		this.coreStores = coreStores;
	}

}
