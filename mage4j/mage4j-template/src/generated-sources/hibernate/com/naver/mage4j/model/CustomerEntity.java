package com.naver.mage4j.model;

// Generated 2014. 7. 17 ���� 12:15:45 by Hibernate Tools 4.0.0

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * CustomerEntity generated by hbm2java
 */
@Entity
@Table(name = "customer_entity"
	, catalog = "magento"
	, uniqueConstraints = @UniqueConstraint(columnNames = {"email", "website_id"}))
public class CustomerEntity implements java.io.Serializable {

	private Integer entityId;
	private CoreWebsite coreWebsite;
	private CoreStore coreStore;
	private short entityTypeId;
	private short attributeSetId;
	private String email;
	private short groupId;
	private String incrementId;
	private Date createdAt;
	private Date updatedAt;
	private short isActive;
	private short disableAutoGroupChange;
	private Set<Tag> tags = new HashSet<Tag>(0);
	private Set<SalesruleCustomer> salesruleCustomers = new HashSet<SalesruleCustomer>(0);
	private Set<PersistentSession> persistentSessions = new HashSet<PersistentSession>(0);
	private Set<ReviewDetail> reviewDetails = new HashSet<ReviewDetail>(0);
	private Set<OauthToken> oauthTokens = new HashSet<OauthToken>(0);
	private Set<CustomerEntityDecimal> customerEntityDecimals = new HashSet<CustomerEntityDecimal>(0);
	private Set<Wishlist> wishlists = new HashSet<Wishlist>(0);
	private Set<CatalogCompareItem> catalogCompareItems = new HashSet<CatalogCompareItem>(0);
	private Set<ProductAlertStock> productAlertStocks = new HashSet<ProductAlertStock>(0);
	private Set<CustomerEntityDatetime> customerEntityDatetimes = new HashSet<CustomerEntityDatetime>(0);
	private Set<CustomerEntityInt> customerEntityInts = new HashSet<CustomerEntityInt>(0);
	private Set<ProductAlertPrice> productAlertPrices = new HashSet<ProductAlertPrice>(0);
	private Set<SalesFlatOrder> salesFlatOrders = new HashSet<SalesFlatOrder>(0);
	private Set<TagRelation> tagRelations = new HashSet<TagRelation>(0);
	private Set<SalesBillingAgreement> salesBillingAgreements = new HashSet<SalesBillingAgreement>(0);
	private Set<ReportViewedProductIndex> reportViewedProductIndexes = new HashSet<ReportViewedProductIndex>(0);
	private Set<CustomerEntityVarchar> customerEntityVarchars = new HashSet<CustomerEntityVarchar>(0);
	private Set<CustomerEntityText> customerEntityTexts = new HashSet<CustomerEntityText>(0);
	private Set<CustomerAddressEntity> customerAddressEntities = new HashSet<CustomerAddressEntity>(0);
	private Set<SalesRecurringProfile> salesRecurringProfiles = new HashSet<SalesRecurringProfile>(0);
	private Set<SalesruleCouponUsage> salesruleCouponUsages = new HashSet<SalesruleCouponUsage>(0);
	private Set<SalesFlatOrderGrid> salesFlatOrderGrids = new HashSet<SalesFlatOrderGrid>(0);
	private Set<ReportComparedProductIndex> reportComparedProductIndexes = new HashSet<ReportComparedProductIndex>(0);
	private Set<DownloadableLinkPurchased> downloadableLinkPurchaseds = new HashSet<DownloadableLinkPurchased>(0);

	public CustomerEntity() {
	}

	public CustomerEntity(short entityTypeId, short attributeSetId, short groupId, Date createdAt, Date updatedAt, short isActive, short disableAutoGroupChange) {
		this.entityTypeId = entityTypeId;
		this.attributeSetId = attributeSetId;
		this.groupId = groupId;
		this.createdAt = createdAt;
		this.updatedAt = updatedAt;
		this.isActive = isActive;
		this.disableAutoGroupChange = disableAutoGroupChange;
	}

	public CustomerEntity(CoreWebsite coreWebsite, CoreStore coreStore, short entityTypeId, short attributeSetId, String email, short groupId, String incrementId, Date createdAt, Date updatedAt, short isActive, short disableAutoGroupChange, Set<Tag> tags, Set<SalesruleCustomer> salesruleCustomers, Set<PersistentSession> persistentSessions, Set<ReviewDetail> reviewDetails, Set<OauthToken> oauthTokens, Set<CustomerEntityDecimal> customerEntityDecimals, Set<Wishlist> wishlists,
		Set<CatalogCompareItem> catalogCompareItems, Set<ProductAlertStock> productAlertStocks, Set<CustomerEntityDatetime> customerEntityDatetimes, Set<CustomerEntityInt> customerEntityInts, Set<ProductAlertPrice> productAlertPrices, Set<SalesFlatOrder> salesFlatOrders, Set<TagRelation> tagRelations, Set<SalesBillingAgreement> salesBillingAgreements, Set<ReportViewedProductIndex> reportViewedProductIndexes, Set<CustomerEntityVarchar> customerEntityVarchars,
		Set<CustomerEntityText> customerEntityTexts, Set<CustomerAddressEntity> customerAddressEntities, Set<SalesRecurringProfile> salesRecurringProfiles, Set<SalesruleCouponUsage> salesruleCouponUsages, Set<SalesFlatOrderGrid> salesFlatOrderGrids, Set<ReportComparedProductIndex> reportComparedProductIndexes, Set<DownloadableLinkPurchased> downloadableLinkPurchaseds) {
		this.coreWebsite = coreWebsite;
		this.coreStore = coreStore;
		this.entityTypeId = entityTypeId;
		this.attributeSetId = attributeSetId;
		this.email = email;
		this.groupId = groupId;
		this.incrementId = incrementId;
		this.createdAt = createdAt;
		this.updatedAt = updatedAt;
		this.isActive = isActive;
		this.disableAutoGroupChange = disableAutoGroupChange;
		this.tags = tags;
		this.salesruleCustomers = salesruleCustomers;
		this.persistentSessions = persistentSessions;
		this.reviewDetails = reviewDetails;
		this.oauthTokens = oauthTokens;
		this.customerEntityDecimals = customerEntityDecimals;
		this.wishlists = wishlists;
		this.catalogCompareItems = catalogCompareItems;
		this.productAlertStocks = productAlertStocks;
		this.customerEntityDatetimes = customerEntityDatetimes;
		this.customerEntityInts = customerEntityInts;
		this.productAlertPrices = productAlertPrices;
		this.salesFlatOrders = salesFlatOrders;
		this.tagRelations = tagRelations;
		this.salesBillingAgreements = salesBillingAgreements;
		this.reportViewedProductIndexes = reportViewedProductIndexes;
		this.customerEntityVarchars = customerEntityVarchars;
		this.customerEntityTexts = customerEntityTexts;
		this.customerAddressEntities = customerAddressEntities;
		this.salesRecurringProfiles = salesRecurringProfiles;
		this.salesruleCouponUsages = salesruleCouponUsages;
		this.salesFlatOrderGrids = salesFlatOrderGrids;
		this.reportComparedProductIndexes = reportComparedProductIndexes;
		this.downloadableLinkPurchaseds = downloadableLinkPurchaseds;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "entity_id", unique = true, nullable = false)
	public Integer getEntityId() {
		return this.entityId;
	}

	public void setEntityId(Integer entityId) {
		this.entityId = entityId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "website_id")
	public CoreWebsite getCoreWebsite() {
		return this.coreWebsite;
	}

	public void setCoreWebsite(CoreWebsite coreWebsite) {
		this.coreWebsite = coreWebsite;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "store_id")
	public CoreStore getCoreStore() {
		return this.coreStore;
	}

	public void setCoreStore(CoreStore coreStore) {
		this.coreStore = coreStore;
	}

	@Column(name = "entity_type_id", nullable = false)
	public short getEntityTypeId() {
		return this.entityTypeId;
	}

	public void setEntityTypeId(short entityTypeId) {
		this.entityTypeId = entityTypeId;
	}

	@Column(name = "attribute_set_id", nullable = false)
	public short getAttributeSetId() {
		return this.attributeSetId;
	}

	public void setAttributeSetId(short attributeSetId) {
		this.attributeSetId = attributeSetId;
	}

	@Column(name = "email")
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "group_id", nullable = false)
	public short getGroupId() {
		return this.groupId;
	}

	public void setGroupId(short groupId) {
		this.groupId = groupId;
	}

	@Column(name = "increment_id", length = 50)
	public String getIncrementId() {
		return this.incrementId;
	}

	public void setIncrementId(String incrementId) {
		this.incrementId = incrementId;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created_at", nullable = false, length = 19)
	public Date getCreatedAt() {
		return this.createdAt;
	}

	public void setCreatedAt(Date createdAt) {
		this.createdAt = createdAt;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "updated_at", nullable = false, length = 19)
	public Date getUpdatedAt() {
		return this.updatedAt;
	}

	public void setUpdatedAt(Date updatedAt) {
		this.updatedAt = updatedAt;
	}

	@Column(name = "is_active", nullable = false)
	public short getIsActive() {
		return this.isActive;
	}

	public void setIsActive(short isActive) {
		this.isActive = isActive;
	}

	@Column(name = "disable_auto_group_change", nullable = false)
	public short getDisableAutoGroupChange() {
		return this.disableAutoGroupChange;
	}

	public void setDisableAutoGroupChange(short disableAutoGroupChange) {
		this.disableAutoGroupChange = disableAutoGroupChange;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "customerEntity")
	public Set<Tag> getTags() {
		return this.tags;
	}

	public void setTags(Set<Tag> tags) {
		this.tags = tags;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "customerEntity")
	public Set<SalesruleCustomer> getSalesruleCustomers() {
		return this.salesruleCustomers;
	}

	public void setSalesruleCustomers(Set<SalesruleCustomer> salesruleCustomers) {
		this.salesruleCustomers = salesruleCustomers;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "customerEntity")
	public Set<PersistentSession> getPersistentSessions() {
		return this.persistentSessions;
	}

	public void setPersistentSessions(Set<PersistentSession> persistentSessions) {
		this.persistentSessions = persistentSessions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "customerEntity")
	public Set<ReviewDetail> getReviewDetails() {
		return this.reviewDetails;
	}

	public void setReviewDetails(Set<ReviewDetail> reviewDetails) {
		this.reviewDetails = reviewDetails;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "customerEntity")
	public Set<OauthToken> getOauthTokens() {
		return this.oauthTokens;
	}

	public void setOauthTokens(Set<OauthToken> oauthTokens) {
		this.oauthTokens = oauthTokens;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "customerEntity")
	public Set<CustomerEntityDecimal> getCustomerEntityDecimals() {
		return this.customerEntityDecimals;
	}

	public void setCustomerEntityDecimals(Set<CustomerEntityDecimal> customerEntityDecimals) {
		this.customerEntityDecimals = customerEntityDecimals;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "customerEntity")
	public Set<Wishlist> getWishlists() {
		return this.wishlists;
	}

	public void setWishlists(Set<Wishlist> wishlists) {
		this.wishlists = wishlists;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "customerEntity")
	public Set<CatalogCompareItem> getCatalogCompareItems() {
		return this.catalogCompareItems;
	}

	public void setCatalogCompareItems(Set<CatalogCompareItem> catalogCompareItems) {
		this.catalogCompareItems = catalogCompareItems;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "customerEntity")
	public Set<ProductAlertStock> getProductAlertStocks() {
		return this.productAlertStocks;
	}

	public void setProductAlertStocks(Set<ProductAlertStock> productAlertStocks) {
		this.productAlertStocks = productAlertStocks;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "customerEntity")
	public Set<CustomerEntityDatetime> getCustomerEntityDatetimes() {
		return this.customerEntityDatetimes;
	}

	public void setCustomerEntityDatetimes(Set<CustomerEntityDatetime> customerEntityDatetimes) {
		this.customerEntityDatetimes = customerEntityDatetimes;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "customerEntity")
	public Set<CustomerEntityInt> getCustomerEntityInts() {
		return this.customerEntityInts;
	}

	public void setCustomerEntityInts(Set<CustomerEntityInt> customerEntityInts) {
		this.customerEntityInts = customerEntityInts;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "customerEntity")
	public Set<ProductAlertPrice> getProductAlertPrices() {
		return this.productAlertPrices;
	}

	public void setProductAlertPrices(Set<ProductAlertPrice> productAlertPrices) {
		this.productAlertPrices = productAlertPrices;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "customerEntity")
	public Set<SalesFlatOrder> getSalesFlatOrders() {
		return this.salesFlatOrders;
	}

	public void setSalesFlatOrders(Set<SalesFlatOrder> salesFlatOrders) {
		this.salesFlatOrders = salesFlatOrders;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "customerEntity")
	public Set<TagRelation> getTagRelations() {
		return this.tagRelations;
	}

	public void setTagRelations(Set<TagRelation> tagRelations) {
		this.tagRelations = tagRelations;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "customerEntity")
	public Set<SalesBillingAgreement> getSalesBillingAgreements() {
		return this.salesBillingAgreements;
	}

	public void setSalesBillingAgreements(Set<SalesBillingAgreement> salesBillingAgreements) {
		this.salesBillingAgreements = salesBillingAgreements;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "customerEntity")
	public Set<ReportViewedProductIndex> getReportViewedProductIndexes() {
		return this.reportViewedProductIndexes;
	}

	public void setReportViewedProductIndexes(Set<ReportViewedProductIndex> reportViewedProductIndexes) {
		this.reportViewedProductIndexes = reportViewedProductIndexes;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "customerEntity")
	public Set<CustomerEntityVarchar> getCustomerEntityVarchars() {
		return this.customerEntityVarchars;
	}

	public void setCustomerEntityVarchars(Set<CustomerEntityVarchar> customerEntityVarchars) {
		this.customerEntityVarchars = customerEntityVarchars;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "customerEntity")
	public Set<CustomerEntityText> getCustomerEntityTexts() {
		return this.customerEntityTexts;
	}

	public void setCustomerEntityTexts(Set<CustomerEntityText> customerEntityTexts) {
		this.customerEntityTexts = customerEntityTexts;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "customerEntity")
	public Set<CustomerAddressEntity> getCustomerAddressEntities() {
		return this.customerAddressEntities;
	}

	public void setCustomerAddressEntities(Set<CustomerAddressEntity> customerAddressEntities) {
		this.customerAddressEntities = customerAddressEntities;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "customerEntity")
	public Set<SalesRecurringProfile> getSalesRecurringProfiles() {
		return this.salesRecurringProfiles;
	}

	public void setSalesRecurringProfiles(Set<SalesRecurringProfile> salesRecurringProfiles) {
		this.salesRecurringProfiles = salesRecurringProfiles;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "customerEntity")
	public Set<SalesruleCouponUsage> getSalesruleCouponUsages() {
		return this.salesruleCouponUsages;
	}

	public void setSalesruleCouponUsages(Set<SalesruleCouponUsage> salesruleCouponUsages) {
		this.salesruleCouponUsages = salesruleCouponUsages;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "customerEntity")
	public Set<SalesFlatOrderGrid> getSalesFlatOrderGrids() {
		return this.salesFlatOrderGrids;
	}

	public void setSalesFlatOrderGrids(Set<SalesFlatOrderGrid> salesFlatOrderGrids) {
		this.salesFlatOrderGrids = salesFlatOrderGrids;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "customerEntity")
	public Set<ReportComparedProductIndex> getReportComparedProductIndexes() {
		return this.reportComparedProductIndexes;
	}

	public void setReportComparedProductIndexes(Set<ReportComparedProductIndex> reportComparedProductIndexes) {
		this.reportComparedProductIndexes = reportComparedProductIndexes;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "customerEntity")
	public Set<DownloadableLinkPurchased> getDownloadableLinkPurchaseds() {
		return this.downloadableLinkPurchaseds;
	}

	public void setDownloadableLinkPurchaseds(Set<DownloadableLinkPurchased> downloadableLinkPurchaseds) {
		this.downloadableLinkPurchaseds = downloadableLinkPurchaseds;
	}

}
